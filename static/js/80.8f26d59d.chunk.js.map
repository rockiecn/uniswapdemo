{"version":3,"sources":["utils/transformSwapRouteToGetQuoteResult.ts","state/routing/clientSideSmartOrderRouter/dependencies.ts","state/routing/clientSideSmartOrderRouter/index.ts"],"names":["transformSwapRouteToGetQuoteResult","type","amount","quote","quoteGasAdjusted","route","estimatedGasUsed","estimatedGasUsedQuoteToken","estimatedGasUsedUSD","gasPriceWei","methodParameters","blockNumber","routeResponse","subRoute","tokenPath","protocol","Protocol","V3","pools","curRoute","i","length","nextPool","tokenIn","tokenOut","edgeAmountIn","undefined","quotient","toString","edgeAmountOut","push","chainId","decimals","address","symbol","fee","liquidity","sqrtRatioX96","tickCurrent","amountIn","amountOut","V2","pairs","reserve0","reserve1","token","currency","wrapped","amountDecimals","toExact","quoteDecimals","quoteGasAdjustedDecimals","gasUseEstimateQuote","gasUseEstimateQuoteDecimals","gasUseEstimate","gasUseEstimateUSD","routeString","routeAmountsToString","GAMetric","key","value","unit","ReactGA","timing","category","variable","label","IMetric","setGlobalMetric","routerParamsByChain","dependenciesByChain","AUTO_ROUTER_SUPPORTED_CHAINS","provider","providers","JsonRpcProvider","INFURA_NETWORK_URLS","buildDependencies","getQuote","alphaRouterConfig","a","amountRaw","params","Error","router","AlphaRouter","currencyIn","Token","currencyOut","baseCurrency","quoteCurrency","CurrencyAmount","fromRawAmount","JSBI","BigInt","TradeType","EXACT_INPUT","EXACT_OUTPUT","swapRoute","data"],"mappings":"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","file":"static/js/80.8f26d59d.chunk.js","sourcesContent":["import { Protocol } from '@uniswap/router-sdk'\r\nimport { Currency, CurrencyAmount } from '@uniswap/sdk-core'\r\nimport { routeAmountsToString, SwapRoute } from '@uniswap/smart-order-router'\r\nimport { GetQuoteResult, V2PoolInRoute, V3PoolInRoute } from 'state/routing/types'\r\n\r\n// from routing-api (https://github.com/Uniswap/routing-api/blob/main/lib/handlers/quote/quote.ts#L243-L311)\r\nexport function transformSwapRouteToGetQuoteResult(\r\n  type: 'exactIn' | 'exactOut',\r\n  amount: CurrencyAmount<Currency>,\r\n  {\r\n    quote,\r\n    quoteGasAdjusted,\r\n    route,\r\n    estimatedGasUsed,\r\n    estimatedGasUsedQuoteToken,\r\n    estimatedGasUsedUSD,\r\n    gasPriceWei,\r\n    methodParameters,\r\n    blockNumber,\r\n  }: SwapRoute\r\n): GetQuoteResult {\r\n  const routeResponse: Array<V3PoolInRoute[] | V2PoolInRoute[]> = []\r\n\r\n  for (const subRoute of route) {\r\n    const { amount, quote, tokenPath } = subRoute\r\n\r\n    if (subRoute.protocol === Protocol.V3) {\r\n      const pools = subRoute.route.pools\r\n      const curRoute: V3PoolInRoute[] = []\r\n      for (let i = 0; i < pools.length; i++) {\r\n        const nextPool = pools[i]\r\n        const tokenIn = tokenPath[i]\r\n        const tokenOut = tokenPath[i + 1]\r\n\r\n        let edgeAmountIn = undefined\r\n        if (i === 0) {\r\n          edgeAmountIn = type === 'exactIn' ? amount.quotient.toString() : quote.quotient.toString()\r\n        }\r\n\r\n        let edgeAmountOut = undefined\r\n        if (i === pools.length - 1) {\r\n          edgeAmountOut = type === 'exactIn' ? quote.quotient.toString() : amount.quotient.toString()\r\n        }\r\n\r\n        curRoute.push({\r\n          type: 'v3-pool',\r\n          tokenIn: {\r\n            chainId: tokenIn.chainId,\r\n            decimals: tokenIn.decimals,\r\n            address: tokenIn.address,\r\n            symbol: tokenIn.symbol,\r\n          },\r\n          tokenOut: {\r\n            chainId: tokenOut.chainId,\r\n            decimals: tokenOut.decimals,\r\n            address: tokenOut.address,\r\n            symbol: tokenOut.symbol,\r\n          },\r\n          fee: nextPool.fee.toString(),\r\n          liquidity: nextPool.liquidity.toString(),\r\n          sqrtRatioX96: nextPool.sqrtRatioX96.toString(),\r\n          tickCurrent: nextPool.tickCurrent.toString(),\r\n          amountIn: edgeAmountIn,\r\n          amountOut: edgeAmountOut,\r\n        })\r\n      }\r\n\r\n      routeResponse.push(curRoute)\r\n    } else if (subRoute.protocol === Protocol.V2) {\r\n      const pools = subRoute.route.pairs\r\n      const curRoute: V2PoolInRoute[] = []\r\n      for (let i = 0; i < pools.length; i++) {\r\n        const nextPool = pools[i]\r\n        const tokenIn = tokenPath[i]\r\n        const tokenOut = tokenPath[i + 1]\r\n\r\n        let edgeAmountIn = undefined\r\n        if (i === 0) {\r\n          edgeAmountIn = type === 'exactIn' ? amount.quotient.toString() : quote.quotient.toString()\r\n        }\r\n\r\n        let edgeAmountOut = undefined\r\n        if (i === pools.length - 1) {\r\n          edgeAmountOut = type === 'exactIn' ? quote.quotient.toString() : amount.quotient.toString()\r\n        }\r\n\r\n        const reserve0 = nextPool.reserve0\r\n        const reserve1 = nextPool.reserve1\r\n\r\n        curRoute.push({\r\n          type: 'v2-pool',\r\n          tokenIn: {\r\n            chainId: tokenIn.chainId,\r\n            decimals: tokenIn.decimals,\r\n            address: tokenIn.address,\r\n            symbol: tokenIn.symbol,\r\n          },\r\n          tokenOut: {\r\n            chainId: tokenOut.chainId,\r\n            decimals: tokenOut.decimals,\r\n            address: tokenOut.address,\r\n            symbol: tokenOut.symbol,\r\n          },\r\n          reserve0: {\r\n            token: {\r\n              chainId: reserve0.currency.wrapped.chainId,\r\n              decimals: reserve0.currency.wrapped.decimals,\r\n              address: reserve0.currency.wrapped.address,\r\n              symbol: reserve0.currency.wrapped.symbol,\r\n            },\r\n            quotient: reserve0.quotient.toString(),\r\n          },\r\n          reserve1: {\r\n            token: {\r\n              chainId: reserve1.currency.wrapped.chainId,\r\n              decimals: reserve1.currency.wrapped.decimals,\r\n              address: reserve1.currency.wrapped.address,\r\n              symbol: reserve1.currency.wrapped.symbol,\r\n            },\r\n            quotient: reserve1.quotient.toString(),\r\n          },\r\n          amountIn: edgeAmountIn,\r\n          amountOut: edgeAmountOut,\r\n        })\r\n      }\r\n\r\n      routeResponse.push(curRoute)\r\n    }\r\n  }\r\n\r\n  const result: GetQuoteResult = {\r\n    methodParameters,\r\n    blockNumber: blockNumber.toString(),\r\n    amount: amount.quotient.toString(),\r\n    amountDecimals: amount.toExact(),\r\n    quote: quote.quotient.toString(),\r\n    quoteDecimals: quote.toExact(),\r\n    quoteGasAdjusted: quoteGasAdjusted.quotient.toString(),\r\n    quoteGasAdjustedDecimals: quoteGasAdjusted.toExact(),\r\n    gasUseEstimateQuote: estimatedGasUsedQuoteToken.quotient.toString(),\r\n    gasUseEstimateQuoteDecimals: estimatedGasUsedQuoteToken.toExact(),\r\n    gasUseEstimate: estimatedGasUsed.toString(),\r\n    gasUseEstimateUSD: estimatedGasUsedUSD.toExact(),\r\n    gasPriceWei: gasPriceWei.toString(),\r\n    route: routeResponse,\r\n    routeString: routeAmountsToString(route),\r\n  }\r\n\r\n  return result\r\n}\r\n","import { AlphaRouterParams, IMetric, MetricLoggerUnit, setGlobalMetric } from '@uniswap/smart-order-router'\r\nimport { INFURA_NETWORK_URLS, SupportedChainId } from 'constants/chains'\r\nimport { providers } from 'ethers/lib/ethers'\r\nimport ReactGA from 'react-ga'\r\n\r\nimport { AUTO_ROUTER_SUPPORTED_CHAINS } from './constants'\r\n\r\nexport type Dependencies = {\r\n  [chainId in SupportedChainId]?: AlphaRouterParams\r\n}\r\n\r\n/** Minimal set of dependencies for the router to work locally. */\r\nexport function buildDependencies(): Dependencies {\r\n  const dependenciesByChain: Dependencies = {}\r\n  for (const chainId of AUTO_ROUTER_SUPPORTED_CHAINS) {\r\n    const provider = new providers.JsonRpcProvider(INFURA_NETWORK_URLS[chainId])\r\n\r\n    dependenciesByChain[chainId] = {\r\n      chainId,\r\n      provider,\r\n    }\r\n  }\r\n\r\n  return dependenciesByChain\r\n}\r\n\r\nclass GAMetric extends IMetric {\r\n  putDimensions() {\r\n    return\r\n  }\r\n\r\n  putMetric(key: string, value: number, unit?: MetricLoggerUnit) {\r\n    ReactGA.timing({\r\n      category: 'Routing API',\r\n      variable: `${key} | ${unit}`,\r\n      value,\r\n      label: 'client',\r\n    })\r\n  }\r\n}\r\n\r\nsetGlobalMetric(new GAMetric())\r\n","import { BigintIsh, CurrencyAmount, Token, TradeType } from '@uniswap/sdk-core'\r\nimport { AlphaRouter, AlphaRouterConfig, ChainId } from '@uniswap/smart-order-router'\r\nimport JSBI from 'jsbi'\r\nimport { GetQuoteResult } from 'state/routing/types'\r\nimport { transformSwapRouteToGetQuoteResult } from 'utils/transformSwapRouteToGetQuoteResult'\r\n\r\nimport { buildDependencies } from './dependencies'\r\n\r\nconst routerParamsByChain = buildDependencies()\r\n\r\nexport async function getQuote(\r\n  {\r\n    type,\r\n    chainId,\r\n    tokenIn,\r\n    tokenOut,\r\n    amount: amountRaw,\r\n  }: {\r\n    type: 'exactIn' | 'exactOut'\r\n    chainId: ChainId\r\n    tokenIn: { address: string; chainId: number; decimals: number; symbol?: string }\r\n    tokenOut: { address: string; chainId: number; decimals: number; symbol?: string }\r\n    amount: BigintIsh\r\n  },\r\n  alphaRouterConfig: Partial<AlphaRouterConfig>\r\n): Promise<{ data: GetQuoteResult; error?: unknown }> {\r\n  const params = routerParamsByChain[chainId]\r\n  if (!params) {\r\n    throw new Error('Router dependencies not initialized.')\r\n  }\r\n\r\n  const router = new AlphaRouter(params)\r\n\r\n  const currencyIn = new Token(tokenIn.chainId, tokenIn.address, tokenIn.decimals, tokenIn.symbol)\r\n  const currencyOut = new Token(tokenOut.chainId, tokenOut.address, tokenOut.decimals, tokenOut.symbol)\r\n\r\n  const baseCurrency = type === 'exactIn' ? currencyIn : currencyOut\r\n  const quoteCurrency = type === 'exactIn' ? currencyOut : currencyIn\r\n  const amount = CurrencyAmount.fromRawAmount(baseCurrency, JSBI.BigInt(amountRaw))\r\n\r\n  const swapRoute = await router.route(\r\n    amount,\r\n    quoteCurrency,\r\n    type === 'exactIn' ? TradeType.EXACT_INPUT : TradeType.EXACT_OUTPUT,\r\n    /*swapConfig=*/ undefined,\r\n    alphaRouterConfig\r\n  )\r\n\r\n  if (!swapRoute) throw new Error('Failed to generate client side quote')\r\n\r\n  return { data: transformSwapRouteToGetQuoteResult(type, amount, swapRoute) }\r\n}\r\n"],"sourceRoot":""}